'''При обращении к атрибуту объекта в Python интерпретатор
ищет этот атрибут сначала в экземпляре объекта, затем в его
классе и, наконец, в родительских классах. Этот процесс
называется "последовательностью определения атрибута"
(Method Resolution Order, MRO).'''

class A:
    def __init__(self):
        self.a = 'a'

class B(A):
    def __init__(self):
        super().__init__()
        self.b = 'b'

class C(A):
    def __init__(self):
        super().__init__()
        self.c = 'c'

class D(B, C):
    def __init__(self):
        super().__init__()
        self.d = 'd'


d = D()
print(d.d)  # 'd'
print(d.b)  # 'b'
print(d.c)  # 'c'
print(d.a)  # 'a'

'''Python сначала ищет атрибут d в экземпляре класса D,
 затем ищет атрибут b в классе B, который определяет этот атрибут, 
 затем ищет атрибут c в классе C, который также определяет этот атрибут, и, 
 наконец, ищет атрибут a в классе A, который определяет этот атрибут. 
 Если атрибут не был найден в нижележащем классе, интерпретатор продолжает 
 поиск в родительском классе, пока не найдет атрибут или не достигнет вершины 
 иерархии наследования.

Эта последовательность определения атрибутов объектов позволяет 
использовать наследование для упрощения кода и избежания 
дублирования функционала.'''